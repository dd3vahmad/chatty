---
import { workos } from '@/lib/workos';

const code = Astro.url.searchParams.get("code");

if (!code) {
	Astro.response.status = 400;
	Astro.response.statusText = "No code provided";
	return Astro.redirect("/auth/login");
}

try {
	const authenticateResponse =
		await workos.userManagement.authenticateWithCode({
			clientId: import.meta.env.WORKOS_CLIENT_ID,
			code,
			session: {
				sealSession: true,
				cookiePassword: import.meta.env.WORKOS_COOKIE_PASSWORD,
			},
		});

	const { user, sealedSession } = authenticateResponse;

	if (!sealedSession) {
		Astro.response.status = 400;
		Astro.response.statusText = "No session provided";
		return Astro.redirect("/auth/login");
	}

	// Store the session in a cookie
	Astro.cookies.set('x-auth-token', sealedSession, {
		path: '/',
		httpOnly: true,
		secure: true,
		sameSite: 'lax',
	});

	// Business logic to handle the user object --> I will send request to store the user details

	return Astro.redirect('/chats');
} catch (error) {
	return Astro.redirect('/auth/login');
}
---