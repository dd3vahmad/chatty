---
import { workos } from '@/lib/workos';
import axios from 'axios';

const code = Astro.url.searchParams.get("code");
if (!code) {
  Astro.response.status = 400;
  Astro.response.statusText = "No code provided";
  return Astro.redirect("/auth/login");
}

try {
  const authenticateResponse = await workos.userManagement.authenticateWithCode({
    clientId: import.meta.env.WORKOS_CLIENT_ID,
    code,
    session: {
      sealSession: true,
      cookiePassword: import.meta.env.WORKOS_COOKIE_PASSWORD,
    },
  });
  
  const { sealedSession } = authenticateResponse;
  if (!sealedSession) {
    Astro.response.status = 400;
    Astro.response.statusText = "No session provided";
    return Astro.redirect("/auth/login");
  }
  
  try {
    const response = await axios.post(
      `${import.meta.env.PUBLIC_SERVER_API_AUTH_URL}/callback`,
      { sessionToken: sealedSession },
      { withCredentials: true }
    );

		Astro.cookies.set("x-auth-token", sealedSession, {
      path: "/",
      httpOnly: true,
      secure: import.meta.env.PROD,
      maxAge: 7 * 24 * 60 * 60 * 1000,
      sameSite: "lax",
    })
    
    return Astro.redirect('/chats');
  } catch (axiosError) {
    console.error("Error during authentication callback:", axiosError);
    return Astro.redirect('/auth/login?error=server_error');
  }
} catch (error) {
  console.error("WorkOS authentication error:", error);
  return Astro.redirect('/auth/login?error=authentication_failed');
}
---
